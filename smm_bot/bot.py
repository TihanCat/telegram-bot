import asyncio
import logging
import sqlite3
import os
from datetime import datetime, time as datetime_time
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import requests
from dotenv import load_dotenv
import nest_asyncio  # –§—ñ–∫—Å –¥–ª—è MacOS

nest_asyncio.apply()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", 0))

if not TELEGRAM_TOKEN or not OPENROUTER_API_KEY or not BOT_USERNAME or CHANNEL_ID == 0:
    logging.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ .env —Ñ–∞–π–ª.")
    exit(1)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
conn = sqlite3.connect("posts.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    language TEXT,
    content TEXT
)
""")
conn.commit()

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à SMM-–±–æ—Ç.")

async def help_command(update: Update, context: CallbackContext):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∏: /start, /help, /settings, /reklama, /addpost.")

async def settings(update: Update, context: CallbackContext):
    await update.message.reply_text("–¢—É—Ç –±—É–¥—É—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")

async def reklama(update: Update, context: CallbackContext):
    await update.message.reply_text("–¢—É—Ç –±—É–¥–µ –æ–±—Ä–æ–±–∫–∞ —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤.")

async def add_post(update: Update, context: CallbackContext):
    post_content = "–ü—Ä–∏–∫–ª–∞–¥ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"
    language = 'ru'
    cursor.execute("INSERT INTO posts (date, language, content) VALUES (?, ?, ?)", (datetime.now(), language, post_content))
    conn.commit()
    await update.message.reply_text("‚úÖ –ü–æ—Å—Ç –¥–æ–¥–∞–Ω–æ –≤ –±–∞–∑—É!")

async def chatgpt_response(update: Update, context: CallbackContext):
    user_message = update.message.text
    try:
        headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}"}
        data = {
            "model": "openrouter/gpt-4o",  # –ú–æ–¥–µ–ª—å –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏
            "messages": [{"role": "user", "content": user_message}],
            "temperature": 0.7
        }
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", json=data, headers=headers)
        ai_response = response.json().get("choices", [{}])[0].get("message", {}).get("content", "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
        await update.message.reply_text(ai_response)
    except Exception as e:
        logger.error(f"OpenRouter API error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ AI. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def daily_posting(context: CallbackContext):
    cursor.execute("SELECT content FROM posts WHERE language = ? ORDER BY date DESC LIMIT 1", ('ru',))
    post = cursor.fetchone()
    if post:
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üí¨ –ü–æ—á–∞—Ç–∏ —á–∞—Ç —ñ–∑ –±–æ—Ç–æ–º", url=f"https://t.me/{BOT_USERNAME}")]]
        )
        await context.bot.send_message(chat_id=CHANNEL_ID, text=post[0], reply_markup=keyboard)
    else:
        await context.bot.send_message(chat_id=CHANNEL_ID, text="‚ùå –ù–µ–º–∞—î –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.")

async def start_daily_posting(application: Application):
    application.job_queue.run_daily(daily_posting, time=datetime_time(9, 0, 0))

async def error(update: Update, context: CallbackContext):
    logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {context.error}")

async def main():
    print("üîπ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("settings", settings))
    app.add_handler(CommandHandler("reklama", reklama))
    app.add_handler(CommandHandler("addpost", add_post))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chatgpt_response))

    await start_daily_posting(app)
    app.add_error_handler(error)

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    async with app:
        await app.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
